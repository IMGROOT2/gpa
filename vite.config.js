import { fileURLToPath, URL } from 'node:url'
import { createHash } from "node:crypto";

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

import { glob } from 'glob'

function swPlugin() {
  return {
    name: "sw-plugin",
    async generateBundle(_options, bundle, _isWrite) {
      // all files under the public/ dir
      const publicFiles = await glob("**/*.*", { cwd: "public" })
      // all files generated by Vite
      const assets = Object.keys(bundle)
      // and "index.html" as well
      const allFiles = JSON.stringify(["/", ...publicFiles, ...assets])

      // hash this list
      const hash = createHash("md5")
        .update(allFiles)
        .digest("hex")
        .substring(0, 10);
      
      // create the service worker
      this.emitFile({
        type: "asset",
        fileName: "service-worker.js",
        source: `
const files = ${allFiles};
const cacheName = "offline-cache-${hash}";

// cache new content
self.addEventListener("install", e => e.waitUntil((async () => {
  const cache = await self.caches.open(cacheName);
  await cache.addAll(files);
})()));

// clean up old caches
self.addEventListener("activate", e => e.waitUntil((async () => {
  const keys = await self.caches.keys();
  for (const key of keys) {
    if (key !== cacheName) await self.caches.delete(key);
  }
})()));

// fetch handler
self.addEventListener("fetch", e => e.respondWith((async () => {
  const cachedResponse = await self.caches.match(e.request);
  if (cachedResponse) return cachedResponse;
  try {
    return await fetch(e.request);
  } catch {
    return new Response("You're offline. No cache available.");
  }
})()));
`
      });
    }
  }
}

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    swPlugin(),
  ],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})
